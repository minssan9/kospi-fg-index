version: '3.8'
services:
  # Nginx Reverse Proxy & SSL Termination
  nginx:
    image: nginx:1.25-alpine
    container_name: fg-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - kospi-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend (Static Files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ghcr.io/minssan9/kospi-fg-index-frontend:latest
    container_name: fg-frontend-prod
    restart: unless-stopped
    volumes:
      - ./logs/frontend:/var/log/nginx
    networks:
      - kospi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ghcr.io/minssan9/kospi-fg-index-backend:latest
    container_name: fg-backend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    volumes:
      - ./logs/backend:/app/logs
    networks:
      - kospi-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Data Collection Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ghcr.io/minssan9/kospi-fg-index-backend:latest
    container_name: fg-scheduler-prod
    restart: unless-stopped
    env_file:
      - .env.production
    command: ["npm", "run", "start:scheduler"]
    volumes:
      - ./logs/scheduler:/app/logs
    networks:
      - kospi-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database (Production)
  database:
    image: postgres:15-alpine
    container_name: fg-database-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-fg_index_prod}
      POSTGRES_USER: ${DATABASE_USER:-fg_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - kospi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-fg_user} -d ${DATABASE_NAME:-fg_index_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fg-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - kospi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log Aggregation (Optional)
  log-aggregator:
    image: fluentd:v1.16-debian
    container_name: fg-logs-prod
    restart: unless-stopped
    volumes:
      - ./logs:/fluentd/log
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - kospi-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  kospi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16