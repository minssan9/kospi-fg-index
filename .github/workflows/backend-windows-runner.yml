name: Backend Windows Runner Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy-backend:
    runs-on: Windows
    env:
      OPENSSL_CONF: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: kospi-fg-index

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # - name: Log in to Docker Hub (if needed)
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
      # Uncomment the above step if you need to push to Docker Hub

    - name: Navigate to backend directory
      run: |
        cd kospi-fg-index/backend
        pwd
        dir

    - name: Copy environment file from root
      run: |
        echo "Copying environment file from system root..."
        if exist C:\\.env (
          copy C:\\.env kospi-fg-index\backend\.env
          echo "Environment file copied from C:\\.env"
        ) else if exist D:\\.env (
          copy D:\\.env kospi-fg-index\backend\.env
          echo "Environment file copied from D:\\.env"
        ) else (
          echo "No .env file found in root directories, creating default..."
          echo NODE_ENV=production > kospi-fg-index\backend\.env
          echo PORT=3000 >> kospi-fg-index\backend\.env
          echo DATABASE_URL=mysql://localhost:3306/kospi_fg >> kospi-fg-index\backend\.env
          echo REDIS_URL=redis://localhost:6379 >> kospi-fg-index\backend\.env
          echo API_KEY=local-dev-key >> kospi-fg-index\backend\.env
          echo LOG_LEVEL=info >> kospi-fg-index\backend\.env
        )
        echo "Environment file ready at kospi-fg-index\backend\.env"

    - name: Build Docker image
      run: |
        cd kospi-fg-index/backend
        docker build -t kospi-fg-backend:${{ github.sha }} .
        docker tag kospi-fg-backend:${{ github.sha }} kospi-fg-backend:latest

    - name: Stop existing containers
      run: |
        cd kospi-fg-index/backend
        docker-compose down --remove-orphans || true
        docker stop kospi-backend || true
        docker rm kospi-backend || true

    - name: Start backend container
      run: |
        cd kospi-fg-index/backend
        docker run -d \
          --name kospi-backend \
          --restart unless-stopped \
          -p 3000:3000 \
          --env-file .env \
          -v ${PWD}/logs:/app/logs \
          kospi-fg-backend:latest

    - name: Wait for container to be ready
      run: |
        echo "Waiting for backend container to be ready..."
        timeout /t 30 /nobreak
        docker logs kospi-backend

    - name: Health check
      run: |
        echo "Performing health check..."
        $maxAttempts = 10
        $attempt = 1
        
        while ($attempt -le $maxAttempts) {
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -Method GET -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
              Write-Host "Health check passed on attempt $attempt"
              break
            }
          } catch {
            Write-Host "Health check failed on attempt $attempt: $($_.Exception.Message)"
          }
          
          if ($attempt -eq $maxAttempts) {
            Write-Host "Health check failed after $maxAttempts attempts"
            docker logs kospi-backend
            exit 1
          }
          
          $attempt++
          Start-Sleep -Seconds 5
        }

    - name: Run tests (optional)
      run: |
        cd kospi-fg-index/backend
        docker exec kospi-backend npm run test:simple || echo "Tests failed but continuing deployment"

    - name: Display container status
      run: |
        echo "Container Status:"
        docker ps
        echo ""
        echo "Container Logs:"
        docker logs kospi-backend --tail 50

    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        docker image prune -f
        docker system prune -f

    - name: Deployment Summary
      run: |
        echo "=== Deployment Summary ==="
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Environment: ${{ github.event.inputs.environment || 'development' }}"
        echo "Runner: Windows"
        echo "Backend URL: http://localhost:3000"
        echo "Container Name: kospi-backend"
        echo "Environment Source: Local .env file"
        echo "========================" 