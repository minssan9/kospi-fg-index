version: '3.8'
services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: kospi-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-kospi_admin_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-kospi_fg_index}
      MYSQL_USER: ${MYSQL_USER:-kospi_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-kospi_pass_2024}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kospi-network
    command: --default-authentication-plugin=mysql_native_password

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kospi-backend
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: mysql://${MYSQL_USER:-kospi_user}:${MYSQL_PASSWORD:-kospi_pass_2024}@mysql:3306/${MYSQL_DATABASE:-kospi_fg_index}
      BOK_API_KEY: ${BOK_API_KEY}
      KRX_API_KEY: ${KRX_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - kospi-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Data Collector (Scheduler)
  collector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kospi-collector
    restart: unless-stopped
    depends_on:
      - mysql
      - backend
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${MYSQL_USER:-kospi_user}:${MYSQL_PASSWORD:-kospi_pass_2024}@mysql:3306/${MYSQL_DATABASE:-kospi_fg_index}
      BOK_API_KEY: ${BOK_API_KEY}
      KRX_API_KEY: ${KRX_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    command: ["npm", "run", "start:scheduler"]
    volumes:
      - ./logs:/app/logs
    networks:
      - kospi-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kospi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kospi-network

volumes:
  mysql_data:
  redis_data:

networks:
  kospi-network:
    driver: bridge 